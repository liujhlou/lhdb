package org.tbs.dao.projs;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;

import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.annotations.common.util.StringHelper;
import org.springframework.stereotype.Component;
import org.tbs.dao.funs.GetSysInfo;
import org.tbs.entity.Bdf2User;
import org.tbs.entity.TbsBasConsway;
import org.tbs.entity.TbsCustomer;
import org.tbs.entity.TbsProj;
import org.tbs.entity.TbsProjBank;
import org.tbs.entity.TbsProjBizvt;
import org.tbs.entity.TbsProjCgg;

import com.bstek.bdf2.core.context.ContextHolder;
import com.bstek.bdf2.core.orm.hibernate.HibernateDao;
import com.bstek.dorado.annotation.DataProvider;
import com.bstek.dorado.annotation.Expose;
import com.bstek.dorado.data.entity.EntityUtils;
import com.bstek.dorado.data.provider.Page;

@Component
public class Proj2ProjeaaDao extends HibernateDao {

    @Resource
    private GetSysInfo gsi;
    
    @DataProvider
    public void getAllToPage(Page<TbsProj> page, Map<String, Object> params)
	    throws Exception {

	if (null != params) {
	    String whereCase = "";
	    String projName = (String) params.get("projName");
	    if (StringHelper.isNotEmpty(projName)) {
		whereCase += " AND projName like '%" + projName + "%' ";
	    }
	    if (params.get("tbsCustomer") instanceof TbsCustomer) {
		TbsCustomer tbsCustomer = (TbsCustomer) params
			.get("tbsCustomer");
		if (tbsCustomer != null && tbsCustomer.getId() != 0) {
			whereCase += " AND tbsCustomer = " + tbsCustomer.getId();
		}
	    }
	    if (params.get("tbsBasConsway") instanceof TbsBasConsway) {
		TbsBasConsway tbsBasConsway = (TbsBasConsway) params
			.get("tbsBasConsway");
		if (tbsBasConsway != null && tbsBasConsway.getId() != 0) {
		    int tbsBasConswayid = tbsBasConsway.getId();
		    whereCase += " AND tbsBasConsway = " + tbsBasConswayid;
		}
	    }
	    Date acptdate = (Date) params.get("acptdate");
	    if (acptdate != null) {
	    DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
	    String acptdate_date = df.format(acptdate);
		whereCase += " AND acptdate = '"+ acptdate_date + "'";
	    }
	    String hql = "from " 
			+ TbsProj.class.getName() 
			+ " where del=0 and ps_id=2 and a_role_id>0 and b_role_id>0"
		    + whereCase + " order by id desc";
	    this.pagingQuery(page, hql, "select count(*) " + hql);

	} else {
	    String hql = "from " + TbsProj.class.getName() 
			+ " where id is null";
	    this.pagingQuery(page, hql, "select count(*) " + hql);
	}
	// 以下为虚拟属性，可以整段注销，取消该属性
	    List<TbsProj> results = new ArrayList<TbsProj>();
	    Collection<TbsProj> tbsProjs = page.getEntities();
	    for (TbsProj tbsProj : tbsProjs) {
		TbsProj targetData = EntityUtils.toEntity(tbsProj);
		List<Bdf2User> bdf2Users = (List<Bdf2User>) gsi
			.getCnameById(tbsProj.getKeyinId());
		EntityUtils.setValue(targetData, "VOcname", bdf2Users.get(0)
			.getCname());
		results.add(targetData);
	    }
	    page.setEntities(results); // 虚拟属性结束
    }

    @DataProvider
    public Collection<TbsProjBizvt> loadTbsProjBizvt(Integer id)
	    throws Exception {
	if (id != null) {
	    String hql = "from " + TbsProjBizvt.class.getName()
		    + " where del = 0 and proj_id= " + id;
	    return this.query(hql);
	} else {
	    return null;
	}
    }

    @DataProvider
    public Collection<TbsProjCgg> loadTbsProjCgg(Integer id) throws Exception {
	if (id != null) {
//	    String hql = "from " + TbsProjCgg.class.getName()
//		    + " where del = 0 and proj_id= " + id;
	    String hql = "from " + TbsProjCgg.class.getName()
		    + " where proj_id= " + id;
	    return this.query(hql);
	} else {
	    return null;
	}
    }

    @DataProvider
    public Collection<TbsProjBank> loadTbsProjBank(Integer id) throws Exception {
	if (id != null) {
//	    String hql = "from " + TbsProjBank.class.getName()
//		    + " where del = 0 and proj_id= " + id;
	    String hql = "from " + TbsProjBank.class.getName()
		    + " where proj_id= " + id;
	    return this.query(hql);
	} else {
	    return null;
	}
    }
    
    @Expose
	public String CreateProjeaa(Map<String, Object> params) throws Exception {
	   	if (null != params) {
    		Session session = this.getSessionFactory().openSession();
    		int projid = (int) params.get("id");
    		String name = (String) params.get("name");
    		String uname = ContextHolder.getLoginUser().getUsername();
    		GetSysInfo gsi = new GetSysInfo();
    		int uid = gsi.getUserID(uname, session);
    		try{
    			String sql="call p_eaa(1,"+projid+","+uid+")";
    			SQLQuery query=session.createSQLQuery(sql);
    			String projeaa_sn=query.uniqueResult().toString();
    			return "项目【"+name+"】\n生成【立项审批单】成功！\n单号【"+projeaa_sn+"】\n接下来，请进入【立项审批单】菜单操作！";
				}finally{
					session.flush();
					session.close();
				}
        }else{
        	String result="未获得项目单据！";
        	return result;
        }
    }
    
}